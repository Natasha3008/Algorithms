//contest 10
//1st task
#include<stdio.h>
#include <stdlib.h>
int main(){
    int n;
    scanf("%d", &n);
    int * grades = (int*)malloc(n*sizeof(int));
    for (int i = 0; i < n; i++){
        scanf("%d", &grades[i]);
    }
    int index = 0;  //индекс последнего элемента подпоследовательности
    int * counter = (int*)calloc(n, sizeof(int));  //массив, в кот будем записывать максимальную длину подпоследовательности для каждого элемента
    for(int i = 0; i < n; i++){
        counter[i] = 1;
    }
    int len = 1;
    printf("Best length = ");
    for (int i = 1; i < n; i++){  // в этом цикле будем сравнивать элементы для выявления неубывающей подпоследовательности наибольшей длины
        if (counter[i] >= len){
            index = i;
            len = counter[i];
        }
        int j = 0;
        while (j < i){
            if ((grades[j] < grades[i] || grades[i] == grades[j]) && counter[i] >= 1 + counter[j]){  
                counter[i] = counter[i];
                //j++;
            }
            if ((grades[j] < grades[i] || grades[j] == grades[i]) && counter[i] < 1 + counter[j]){
                counter[i] = counter[j] + 1;
                //j++;
            }
            j++;
        }
        if (counter[i] >= len){
            index = i;
        }
        if (counter[i] >= len){
            len = counter[i];
        }
    }
    printf("%d", len);
    printf("\n");

    int tmp = 0;
    
    int * result = (int*)malloc(len*sizeof(int));   //массив, куда запишем индексы тех элеметов, которые образуют наибольшую подпоследовательность
    for (int i = index; i>=0; i--){
        if (counter[i] == len){
            result[tmp] = i;
            tmp++;
            len--;
        }
    }
    int * answer = (int *) malloc(len*sizeof(int));  //массив, в который запишем саму подпоследовательность

    // for (int i = 0; i < len; i++){
    //     int a = grades[i];
    //     answer[i] = a;
    // }

    printf("Best combo is:  ");
    // for (int i = tmp - 1; i >= 0; i--) {
    //     printf("%d ", result[i]);
    // }
    int c = 0;
    for (int i = tmp - 1; i >= 0; i--){
        int a = result[c];
        answer[i] = grades[a];
        //answer[c] = res
        //
        c++;
    }
    for(int i = 0; i < tmp; i++){
        printf("%d ", answer[i]);
    }
    return 0;
}

//2nd task
#include <iostream>
#include <vector>

using namespace std;

// Структура для хранения координат
struct Coordinates {
    int x, y;
};

int main() {
    int n, m;
    cin >> n >> m;
    int start_row, start_col;
    vector<vector<int>> matrix(n, vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            char cell;
            cin >> cell;
            int num = static_cast<int>(cell) - 48;
            if (cell == 'S') {
                matrix[i][j] = 0;
                start_row = i;
                start_col = j;
            } else {
                matrix[i][j] = num;
            }
        }
    }

    vector<vector<int>> dp(n, vector<int>(m, 0));
    dp[start_row][start_col] = matrix[start_row][start_col];

    for (int i = start_row; i < n; i++) {
        for (int j = start_col; j < m; j++) {
            if (i == start_row && j == start_col) {
                continue;
            } else if (i == start_row) {
                dp[i][j] = dp[i][j - 1] + matrix[i][j];
            } else if (j == start_col) {
                dp[i][j] = dp[i - 1][j] + matrix[i][j];
            } else {
                dp[i][j] = matrix[i][j] + max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << dp[i][j] << " ";
        }
        cout << "\n";
    }

    vector<Coordinates> path;
    int i = n - 1, j = m - 1;
    int coins = dp[n - 1][m - 1];
    while (i >= start_row && j >= start_col) {
        path.push_back({i, j}); // Добавление координат в вектор
        if (i > start_row && dp[i - 1][j] + matrix[i][j] == dp[i][j])
            i--;
        else if (j > start_col)
            j--;
        else
            break;
    }
    path.push_back({start_row, start_col}); // Добавление стартовой точки в вектор

    cout << "Path:" << endl;
    for (int k = path.size() - 2; k >= 0; k--) {
        cout << "(" << path[k].x << "," << path[k].y << ") ";
    }
    cout << endl << "Coins: " << coins << endl;

    return 0;
}

//3rd task
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

struct CoordinatesOfPoints {
    int start;
    int finish;
};

int main() {
    int n;
    cin >> n;

    vector<CoordinatesOfPoints> intervals(n);
    for (int i = 0; i < n; i++) {
        cin >> intervals[i].start;
        cin >> intervals[i].finish;
    }
    //int min = INT_MAX;
    for (int i = 0; i < intervals.size() - 1; i++) {
        for (int j = 0; j < intervals.size() - i - 1; j++) {
            if (intervals[j+1].finish == intervals[j].finish && intervals[j+1].start < intervals[j].start){
                int tmpA = intervals[j].start;
                intervals[j].start= intervals[j+1].start;
                intervals[j+1].start = tmpA;
                int tmpB = intervals[j].finish;
                intervals[j].finish= intervals[j+1].finish;
                intervals[j+1].finish = tmpB;
            }
            if (intervals[j+1].finish != intervals[j].finish && intervals[j+1].finish < intervals[j].finish){
                int tmpA = intervals[j].start;
                intervals[j].start= intervals[j+1].start;
                intervals[j+1].start = tmpA;
                int tmpB = intervals[j].finish;
                intervals[j].finish= intervals[j+1].finish;
                intervals[j+1].finish = tmpB;
            }
        }
    }

    vector<int> points = {intervals[0].finish};
    int m = intervals.size();
    int i = 1;
    while(i < m){
        if (intervals[i].start > points.back()) {
            int s = intervals[i].finish;
            points.push_back(s);
        }
        i++;
    }

    int len = points.size();
    std::cout << len << endl;

    for (int i = 0; i < len; i++){
        std::cout << points[i] << " ";
    }

    return 0;
}
